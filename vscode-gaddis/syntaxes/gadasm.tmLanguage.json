{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Gaddis Assembly",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#whitespace"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.semi-colon.gadasm",
					"match": "(;).*$\n?",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.gadasm"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.single.gadasm",
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.gadasm"
						}
					},
					"end": "'|$",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.gadasm"
						}
					},
					"patterns": [
						{
							"name": "constant.character.escape.gadasm",
							"match": "\\\\."
						}
					]		
				}
			]
		},
		"whitespace": {
			"patterns": [
				{
					"name": "invalid.illegal.whitespace.gadasm",
					"match": "\\s+"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.gadasm",
					"match": "\\b(noop|begin|end|jump|call|libcall|return)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.gadasm",
					"match": "\\b(for|step|store|literal|dup|pop|global|local|param|conv|add|sub|mul|div|exp|mod|eq|neq|lt|lte|gt|gte|and|or|not|neg)\\b"
				},
				{
					"name": "keyword.operator.gadasm",
					"match": "&|\\*"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.gaddis",
					"match": "\\b(true|false|tab)\\b"
				},
				{
					"name": "constant.numeric.gadasm",
					"match": "\\b(\\-?[0-9]+(\\.[0-9]+)?)\\b"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.type.gadasm",
					"match": "\\b(int|real|str|char|bool)\\b"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "entity.name.label.gadasm",
					"match": ":([a-zA-Z_][a-zA-Z0-9_]*)\\b"
				},
				{
					"name": "variable.other.register.gadasm",
					"match": "#([a-zA-Z_][a-zA-Z0-9_]*)\\b"
				},
				{
					"name": "constant.numeric.address.gadasm",
					"match": "\\b(0x[0-9A-Fa-f]{4})\\b"
				}
			]
		}
	},
	"scopeName": "source.gadasm"
}